{"name":"Block And Closure","tagline":"","body":"#Objective-C Block\r\nsee: http://fuckingblocksyntax.com/\r\n\r\n##As a local variable:\r\n\r\n```objective-c\r\nreturnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};\r\n```\r\n\r\n##As a property:\r\n\r\n```objective-c\r\n@property (nonatomic, copy) returnType (^blockName)(parameterTypes);\r\n```\r\n\r\n##As a method parameter:\r\n\r\n```objective-c\r\n- (void)someMethodThatTakesABlock:(returnType (^) (parameterTypes))blockName;\r\n```\r\n\r\n##As an argument to a method call:\r\n\r\n```objective-c\r\n[someObject someMethodTahtTakesABlock:^returnType (parameters) {...}];\r\n```\r\n\r\n##As a typedef:\r\n\r\n```objective-c\r\ntypedef returnType (^TypeName)(parameterTypes);\r\nTypeName blockName = ^returnType(parameters) {...};\r\n```\r\n\r\n\r\n***\r\n***\r\n\r\n\r\n#Swift Closure\r\nsee: http://fuckingclosuresyntax.com/\r\n\r\n##As a variable:\r\n\r\n```swift\r\nvar closureName: (parameterTypes) -> (returnType)\r\n```\r\n\r\n##As an optional variable:\r\n\r\n```swift\r\nvar closureName: ((parameterTypes) -> (returnType))?\r\n```\r\n\r\n##As a type alias:\r\n\r\n```swift\r\ntypealias closureType = (parameterTypes) -> (returnType)\r\n```\r\n\r\n##As a constant:\r\n\r\n```swift\r\nlet closureName: closureType = {...}\r\n```\r\n\r\n##As an argument to a function call:\r\n\r\n```swift\r\nfunc({(parameterTypes) -> (returnType) in statements})\r\n```\r\n\r\n##As a function parameter:\r\n\r\n```swift\r\narray.sort({ (item1: Int, item2: Int) -> Bool in return item1 < item2 })\r\n```\r\n\r\n##As a function parameter with implied types:\r\n\r\n```swift\r\narray.sort({ (item1, item2) -> Bool in return item1 < item2 })\r\n```\r\n\r\n##As a function parameter with implied return type:\r\n\r\n```swift\r\narray.sort({ (item1, item2) in return item1 < item2 })\r\n```\r\n\r\n##As the last function parameter:\r\n\r\n```swift\r\narray.sort { (item1, item2) in return item1 < item2 }\r\n```\r\n\r\n##As the last parameter, using shorthand argument names:\r\n\r\n```swift\r\narray.sort { return $0 < $1 }\r\n```\r\n\r\n##As the last parameter, with an implied return value:\r\n\r\n```swift\r\narray.sort { $0 < $1 }\r\n```\r\n\r\n##As the last parameter, as a reference to an existing function:\r\n\r\n```swift\r\narray.sort(<)\r\n```\r\n\r\n##As a function parameter with explicit capture semantics:\r\n\r\n```swift\r\narray.sort({ [unowned self] (item1: Int, item2: Int) -> Bool in return item1 < item2 })\r\n```\r\n\r\n##As a function parameter with explicit capture semantics and inferred parameters / return type:\r\n\r\n```swift\r\narray.sort({ [unowned self] in return item1 < item2 })","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}